/*
 * Author : Anushka Gurjar
 * Date   : May 2020
 * flags  : -std=c++14
*/

#include<bits/stdc++.h>
using namespace std;

// Problem Statement: https://www.interviewbit.com/problems/infix-to-postfix/

void setOpeartorsPriority(unordered_map<char, short>& operatorPriority){
    operatorPriority['+'] = 1;
    operatorPriority['-'] = 1;
    operatorPriority['*'] = 2;
    operatorPriority['/'] = 2;
    operatorPriority['^'] = 3;
    operatorPriority['('] = 4;
}

void solveBracketEquation(stack<char>& sign, string& result){
    while(sign.top() != '('){
        result.push_back(sign.top());
        sign.pop();
    }
    sign.pop();
}

void solveHigherPriority(stack<char>& sign, string& result, unordered_map<char, short>& operatorPriority, char currSign){
    
    while(!sign.empty() && operatorPriority[currSign] <= operatorPriority[sign.top()] && sign.top() != '('){
        result.push_back(sign.top());
        sign.pop();
    }
}

string Solution::solve(string A){
    string result;
    stack<char> sign;
    unordered_map<char, short> operatorPriority;
    setOpeartorsPriority(operatorPriority);
    
    for(auto ch: A){
        if(isalpha(ch)){
            result.push_back(ch);
        }
        else if(ch == ')'){
            solveBracketEquation(sign, result);
        }
        else if(ch == '('){
            sign.push(ch);
        }
        else{
            if(!sign.empty() && operatorPriority[ch] <= operatorPriority[sign.top()] && sign.top() != '(')
                solveHigherPriority(sign, result, operatorPriority, ch);
            sign.push(ch);
        }
    }
    
    while(!sign.empty()){
        result.push_back(sign.top());
        sign.pop();
    }
    
    return result;
}

/*
    Store the incr order of Operator priority in Stack.
    If an unorder operator comes, keep poping Operator from stack till stack empty or some greater operator than current in found.
    
    Case:
    bracket - 
        push open bracket into stack
        when closing bracket is found, pop operators till open bracket is found.
*/

